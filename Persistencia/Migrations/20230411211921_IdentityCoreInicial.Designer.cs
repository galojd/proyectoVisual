// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(SeriesOnlineContext))]
    [Migration("20230411211921_IdentityCoreInicial")]
    partial class IdentityCoreInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dominio.Entidades.Capitulo", b =>
                {
                    b.Property<Guid>("CapituloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CapituloUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCapitulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumeroCapitulo")
                        .HasColumnType("int");

                    b.Property<Guid?>("SerieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Temporada")
                        .HasColumnType("int");

                    b.Property<string>("imagenurl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CapituloId");

                    b.HasIndex("SerieId");

                    b.ToTable("Capitulo");
                });

            modelBuilder.Entity("Dominio.Entidades.Comentario", b =>
                {
                    b.Property<Guid>("ComentarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CapituloId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComentarioTexto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SerieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ComentarioId");

                    b.HasIndex("CapituloId");

                    b.HasIndex("SerieId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("Dominio.Entidades.Genero", b =>
                {
                    b.Property<Guid>("GeneroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeneroId");

                    b.ToTable("Genero");

                    b.HasData(
                        new
                        {
                            GeneroId = new Guid("5b795113-0407-4d8f-9c21-e44af90a7916"),
                            Nombre = "Animación"
                        },
                        new
                        {
                            GeneroId = new Guid("e219975a-b961-4e47-b291-15a921899dcf"),
                            Nombre = "Comedia"
                        },
                        new
                        {
                            GeneroId = new Guid("64636a50-2147-423c-a25d-41f834331d4c"),
                            Nombre = "Romance"
                        },
                        new
                        {
                            GeneroId = new Guid("3f6f9ff4-c6ae-4e99-81e0-c6fd20088416"),
                            Nombre = "Ciencia Ficción"
                        },
                        new
                        {
                            GeneroId = new Guid("778136f3-c81b-4896-a4f0-e7914520df74"),
                            Nombre = "Drama"
                        },
                        new
                        {
                            GeneroId = new Guid("b97f5ec1-ce3f-49c0-9d53-b85ae622de7a"),
                            Nombre = "Aventura"
                        },
                        new
                        {
                            GeneroId = new Guid("c91e22ac-666e-4650-b592-47be6feb999b"),
                            Nombre = "Acción"
                        },
                        new
                        {
                            GeneroId = new Guid("f866e457-b52f-4912-a941-e33b0b41af8d"),
                            Nombre = "Terror"
                        },
                        new
                        {
                            GeneroId = new Guid("88269cee-0b30-4ce7-a2a9-5a5f1e1b50d7"),
                            Nombre = "Erotismo"
                        },
                        new
                        {
                            GeneroId = new Guid("9e026de0-57d6-409a-90ae-fc4dc174e56e"),
                            Nombre = "Belico"
                        },
                        new
                        {
                            GeneroId = new Guid("8e3742db-a23a-4591-ad03-f56d503d6afe"),
                            Nombre = "Super Heroes"
                        },
                        new
                        {
                            GeneroId = new Guid("1b77047c-c526-4b0c-a3d2-4158c6e0d735"),
                            Nombre = "Corte Oscuro"
                        },
                        new
                        {
                            GeneroId = new Guid("10c38c0a-5620-4f00-b950-4263ebf215fb"),
                            Nombre = "Recuentos de vida"
                        },
                        new
                        {
                            GeneroId = new Guid("f945714c-3bd7-48cc-86ae-44e6d6731382"),
                            Nombre = "Escolar"
                        });
                });

            modelBuilder.Entity("Dominio.Entidades.GeneroSerie", b =>
                {
                    b.Property<Guid>("SerieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GeneroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SerieId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("GeneroSerie");
                });

            modelBuilder.Entity("Dominio.Entidades.Serie", b =>
                {
                    b.Property<Guid>("SerieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SerieId");

                    b.ToTable("Serie");
                });

            modelBuilder.Entity("Dominio.Entidades.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.UsuarioSerie", b =>
                {
                    b.Property<Guid>("SerieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SerieId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioSerie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Capitulo", b =>
                {
                    b.HasOne("Dominio.Entidades.Serie", "serie")
                        .WithMany("NumeroCapitulo")
                        .HasForeignKey("SerieId");

                    b.Navigation("serie");
                });

            modelBuilder.Entity("Dominio.Entidades.Comentario", b =>
                {
                    b.HasOne("Dominio.Entidades.Capitulo", "capitulo")
                        .WithMany("TextoComentario")
                        .HasForeignKey("CapituloId");

                    b.HasOne("Dominio.Entidades.Serie", "serie")
                        .WithMany("TextoComentario")
                        .HasForeignKey("SerieId");

                    b.HasOne("Dominio.Entidades.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("capitulo");

                    b.Navigation("serie");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Dominio.Entidades.GeneroSerie", b =>
                {
                    b.HasOne("Dominio.Entidades.Genero", "genero")
                        .WithMany("Generoserie")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Serie", "serie")
                        .WithMany("Generoserie")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("genero");

                    b.Navigation("serie");
                });

            modelBuilder.Entity("Dominio.Entidades.UsuarioSerie", b =>
                {
                    b.HasOne("Dominio.Entidades.Serie", "serie")
                        .WithMany("UsuariodeSerie")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("serie");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Entidades.Capitulo", b =>
                {
                    b.Navigation("TextoComentario");
                });

            modelBuilder.Entity("Dominio.Entidades.Genero", b =>
                {
                    b.Navigation("Generoserie");
                });

            modelBuilder.Entity("Dominio.Entidades.Serie", b =>
                {
                    b.Navigation("Generoserie");

                    b.Navigation("NumeroCapitulo");

                    b.Navigation("TextoComentario");

                    b.Navigation("UsuariodeSerie");
                });
#pragma warning restore 612, 618
        }
    }
}
